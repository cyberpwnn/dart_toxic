import 'dart:math';

String _c(int from, [int? to, Set<int>? not]) => to == null
    ? String.fromCharCode(from)
    : List.generate(to - from, (i) => from + i)
        .where((c) => not == null || !not.contains(c))
        .map((i) => String.fromCharCode(i))
        .join();

extension XString on String {
  String genAsCharset(int length, {int? seed}) {
    Random r = seed == null ? Random.secure() : Random(seed);
    return List.generate(
      length,
      (index) => this[r.nextInt(this.length)],
    ).join();
  }
}

final Map<String, String> charsetPalettes = {
  "ddr": "←↑→↓",
  "taiTham": "ᨠᨡᨢᨣᨤᨥᨦᨧᨨᨩᨪᨫᨬᨭᨮᨯᨰᨱᨲᨳᨴᨵᨶᨷᨸᨹᨺᨻᨼᨽᨾᨿᩀᩁᩂᩃᩄᩅᩆᩇᩈᩉᩊᩋᩌᩍᩎᩏᩐᩑᩒᩓᩔ",
  "latinXB": "ƀƁƂƃƄƅƆƇƈƉƊƋƌƍƎƏƐƑƒƓƔƕƖƗƘƙƚƛƜƝƞƟƠơƢƣƤƥƦƧƨƩƪƫƬƭƮƯưƱƲƳƴƵƶƷƸƹƺƻƼƽƾƿ",
  "xbox": "XABY",
  "georgian": "ႠႡႢႣႤႥႦႧႨႩႪႫႬႭႮႯႰႱႲႳႴႵႶႷႸႹႺႻႼႽႾႿჀჁჂჃჄ",
  "glagoliticMicro": "ⰀⰁⰂⰡⰢ",
  "braille": _c(0x2800, 0x28ff),
  "gurmukhi": _c(0x0a01, 0x0a76, {
    0x0a04,
    0x0a0b,
    0x0a0c,
    0x0a0d,
    0x0a0e,
    0x0a11,
    0x0a12,
    0x0a29,
    0x0a31,
    0x0a34,
    0x0a37,
    0x0a3a,
    0x0a3b,
    0x0a3d,
    0x0a43,
    0x0a44,
    0x0a45,
    0x0a46,
    0x0a49,
    0x0a4a,
    0x0a4e,
    0x0a4f,
    0x0a50,
    0x0a52,
    0x0a53,
    0x0a54,
    0x0a55,
    0x0a56,
    0x0a57,
    0x0a58,
    0x0a5d,
    0x0a5f,
    0x0a60,
    0x0a61,
    0x0a62,
    0x0a63,
    0x0a64,
    0x0a65,
  }),
  "gujarati": _c(0x0a81, 0x0aff, {
    0x0a84,
    0x0a8e,
    0x0a92,
    0x0aa9,
    0x0ab1,
    0x0ab4,
    0x0aba,
    0x0abb,
    0x0ac6,
    0x0aca,
    0x0ace,
    0x0acf,
    0x0ad1,
    0x0ad2,
    0x0ad3,
    0x0ad4,
    0x0ad5,
    0x0ad6,
    0x0ad7,
    0x0ad8,
    0x0ad9,
    0x0ada,
    0x0adb,
    0x0adc,
    0x0add,
    0x0ade,
    0x0adf,
    0x0ae4,
    0x0ae5,
    0x0af2,
    0x0af3,
    0x0af4,
    0x0af5,
    0x0af6,
    0x0af7,
    0x0af8,
  }),
  "devanagari": _c(0x0900, 0x097f),
  "nko": _c(0x07c0, 0x07ff, {0x07fc}),
  "syriac": "${_c(0x0710, 0x072f)}${_c(0x074d, 0x074f)}",
  "thaana": _c(0x0780, 0x07b1),
  "arabic": "${_c(0x0600, 0x06ff, {
        0x061A,
        0x061D,
        0x653
      })}${_c(0x0750, 0x077f)}${_c(0x08a0, 0x08bd)}",
  "arabicLine": "${_c(0x0600, 0x0605)}${_c(0x060e)}",
  "latin": _c(0x00c0, 0x02af),
  "greek": _c(0x0388, 0x03ff),
  "cyrrilic": _c(0x0400, 0x052f, {0x0483, 0x0484, 0x0485, 0x0486, 0x0487}),
  "hebrew": _c(0x05d0, 0x05f2, {0x05ec, 0x05ed, 0x05ee, 0x05ef, 0x05eb}),
  "armenian": _c(0x0531, 0x0588, {
    0x0557,
    0x0558,
    0x0560,
    0x0559,
    0x055a,
    0x055b,
    0x055c,
    0x055d,
    0x055e,
    0x055f,
  }),
  "bengali": _c(0x0980, 0x09fe, {
    0x09D0,
    0x09D8,
    0x09CA,
    0x0992,
    0x09C5,
    0x09D4,
    0x09B1,
    0x09B2,
    0x09B3,
    0x09BA,
    0x09C6,
    0x09B5,
    0x09C2,
    0x09C3,
    0x098E,
    0x09B4,
    0x0984,
    0x098d,
    0x0991,
    0x09a9,
    0x09bb,
    0x09c9,
    0x09cf,
    0x09d1,
    0x09d2,
    0x09d3,
    0x09d5,
    0x09d6,
    0x09d9,
    0x09da,
    0x09db,
    0x09de,
    0x09e4,
    0x09e5,
  }),
};
